//https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/
//BFS approach beats 91%, not sure if it is constant space tho. Pretty sure it is O(n) space. damn it
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    
    void connect(TreeLinkNode *root) {
        if(root == NULL)
            return;
        
        vector<TreeLinkNode*> this_queue;
        vector<TreeLinkNode*> next_queue;
        next_queue.push_back(root);
        while(!next_queue.empty())
        {
            this_queue = next_queue;
            next_queue.clear();
            int i=0; 
            while(i<this_queue.size()-1)
            {
                pushChild(this_queue[i],next_queue);
                this_queue[i]->next = this_queue[i+1];
                i++;
            }
            pushChild(this_queue[i],next_queue);
        }
    }
    void pushChild(TreeLinkNode *root, vector<TreeLinkNode*>& targetVector)
    {
        if(root->left!=NULL)
        {
            targetVector.push_back(root->left);
            targetVector.push_back(root->right);
        }
    }

};